---
import jccText from '../assets/images/jcc-text.png'
import ToggleTheme from './ToggleTheme.astro'
---
<header-menu id="nav-header"
    transition:name="header"
    transition:persist
>
    <a class="logo" href="/">
        <img src={jccText.src} alt="Judo Central Coast Logo" class="h-12" />
    </a>

    <div class="menu-wrapper">
        <input class="side-menu" type="checkbox" id="nav-menu-burger"/>
        <label for="nav-menu-burger" id="nav-menu-burger-label" class="cursor-pointer">
            <div class="burger">
                &#9776;
            </div>
            <div class="close">
                &times;
            </div>
        </label>

        <nav>
            <ul>
                <li><a href="/classes">Classes</a></li>
                <li><a href="/timetable">Timetable</a></li>
                <li><a href="/locations">Locations</a></li>
                <li><a href="/pricing">Pricing</a></li>
                <li><a href="/resources">Resources</a></li>
                <li><a href="/contact">Contact Us</a></li>
                <li><ToggleTheme /></li>
            </ul>
        </nav>
    </div>
</header-menu>

<script>
    class HeaderMenu extends HTMLElement {
        constructor() {
            super()
        }

        connectedCallback() {
            this.scrollListener = (e) => this.onScroll(e)
            document.addEventListener('scroll', this.scrollListener)
            this.burgerCheckBox = this.querySelector('#nav-menu-burger')
            this.burgerCheckBox.checked = false

            this.burgerCheckBox.addEventListener('change', () => {
                this.scrollIntoView()
                if (this.burgerCheckBox.checked == true) {
                    document.body.classList.add('no-scroll')
                } else {
                    document.body.classList.remove('no-scroll')
                }
            })

            // simulate scroll to init
            document.dispatchEvent(new Event('scroll'))

            const links = this.querySelectorAll("a")
            links.forEach((e) => e.addEventListener('click', () => this.burgerCheckBox.checked = false))
        }

        disconnectedCallback() {
            document.removeEventListener('scroll', this.scrollListener)
        }

        onScroll(e) {
            const atTop = this.getBoundingClientRect().top < 1

            if (atTop) {
                this.classList.add('at-top')
            } else {
                this.classList.remove('at-top')
            }
        }
    }
    customElements.define('header-menu', HeaderMenu)
</script>

<style>
    header-menu {
        @apply bg-bg-light dark:bg-bg-dark flex sticky top-0 z-30
            justify-center lg:justify-start p-4 h-20;

        .logo {
            @apply opacity-0 z-40 transition-opacity duration-[2000ms] delay-1000 w-0;
        }

        &.at-top {
            .logo {
                @apply opacity-100 w-auto;
            }
        }

        #nav-menu-burger {
            @apply hidden;

            & ~ label {
                @apply flex lg:hidden absolute top-0 left-0 p-4 h-20 w-12 text-4xl flex-col justify-center items-center text-center z-50;
                & .close {
                    @apply hidden;
                }
            }

            &:checked {
                & ~ label {
                    .burger {
                        @apply hidden;
                    }
                    .close {
                        @apply block;
                    }
                }

                & ~ nav {
                    @apply max-lg:block;
                }
            }
        }

        & nav {
            @apply hidden lg:flex lg:absolute lg:right-0 lg:top-0
            lg:h-full lg:flex-col lg:justify-end
            text-xl lg:py-2 lg:px-4

            max-lg:bg-bg-light max-lg:dark:bg-bg-dark max-lg:h-[calc(100vh-7rem)] max-lg:w-screen
            max-lg:absolute max-lg:left-0 max-lg:top-20
            ;

            & ul {
                @apply flex flex-col lg:flex-row gap-8 lg:gap-4 max-lg:p-8;
            }
        }
    }
</style>

